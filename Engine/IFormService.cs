using System;
using System.Collections.Generic;
using ESS.FW.Bpm.Engine.Authorization;
using ESS.FW.Bpm.Engine.Form;
using ESS.FW.Bpm.Engine.Runtime;
using ESS.FW.Bpm.Engine.Variable;
using ESS.FW.Bpm.Engine.Variable.Value;

namespace ESS.FW.Bpm.Engine
{
    /// <summary>
    ///     Access to form data and rendered forms for starting new process instances and completing tasks.
    ///      
    /// </summary>
    public interface IFormService
    {
        /// <summary>
        ///     Retrieves all data necessary for rendering a form to start a new process instance.
        ///     This can be used to perform rendering of the forms outside of the process engine.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        IStartFormData GetStartFormData(string processDefinitionId);

        /// <summary>
        ///     Rendered form generated by the default build-in form engine for starting a new process instance.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        object GetRenderedStartForm(string processDefinitionId);

        /// <summary>
        ///     Rendered form generated by the given build-in form engine for starting a new process instance.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        object GetRenderedStartForm(string processDefinitionId, string formEngineName);

        /// @deprecated use
        /// <seealso cref="#submitStartForm(String, Map)" />
        [Obsolete("use <seealso cref=\"#submitStartForm(String, java.Util.Map)\"/>")]
        IProcessInstance SubmitStartFormData(string processDefinitionId, IDictionary<string, string> properties);

        /// <summary>
        ///     Start a new process instance with the user data that was entered as properties in a start form.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#CREATE" /> permission on
        ///     <seealso cref="Resources#PROCESS_INSTANCE" />
        ///     and no <seealso cref="Permissions#CREATE_INSTANCE" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />
        ///     .
        /// </exception>
        IProcessInstance SubmitStartForm(string processDefinitionId, IDictionary<string, object> properties);

        /// @deprecated use
        /// <seealso cref="#submitStartForm(String, String, Map)" />
        [Obsolete("use <seealso cref=\"#submitStartForm(String, String, java.Util.Map)\"/>")]
        IProcessInstance SubmitStartFormData(string processDefinitionId, string businessKey,
            IDictionary<string, string> properties);

        /// <summary>
        ///     Start a new process instance with the user data that was entered as properties in a start form.
        ///     A business key can be provided to associate the process instance with a
        ///     certain identifier that has a clear business meaning. For example in an
        ///     order process, the business key could be an order id. This business key can
        ///     then be used to easily look up that process instance , see
        ///     <seealso cref="ProcessInstanceQuery#processInstanceBusinessKey(String)" />. Providing such a business
        ///     key is definitely a best practice.
        ///     Note that a business key MUST be unique for the given process definition.
        ///     Process instance from different process definition are allowed to have the
        ///     same business key.
        /// </summary>
        /// <param name="processDefinitionId"> the id of the process definition, cannot be null. </param>
        /// <param name="businessKey">
        ///     a key that uniquely identifies the process instance in the context or the
        ///     given process definition.
        /// </param>
        /// <param name="properties">
        ///     the properties to pass, can be null.
        /// </param>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#CREATE" /> permission on
        ///     <seealso cref="Resources#PROCESS_INSTANCE" />
        ///     and no <seealso cref="Permissions#CREATE_INSTANCE" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />
        ///     .
        /// </exception>
        IProcessInstance SubmitStartForm(string processDefinitionId, string businessKey,
            IDictionary<string, object> properties);

        /// <summary>
        ///     Retrieves all data necessary for rendering a form to complete a ITask.
        ///     This can be used to perform rendering of the forms outside of the process engine.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on <seealso cref="Resources#ITask" />
        ///     or no <seealso cref="Permissions#READ_TASK" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        ITaskFormData GetTaskFormData(string taskId);

        /// <summary>
        ///     Rendered form generated by the default build-in form engine for completing a ITask.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on <seealso cref="Resources#ITask" />
        ///     or no <seealso cref="Permissions#READ_TASK" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        object GetRenderedTaskForm(string taskId);

        /// <summary>
        ///     Rendered form generated by the given build-in form engine for completing a ITask.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on <seealso cref="Resources#ITask" />
        ///     or no <seealso cref="Permissions#READ_TASK" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        object GetRenderedTaskForm(string taskId, string formEngineName);

        /// @deprecated use
        /// <seealso cref="#submitTaskForm(String, Map)" />
        [Obsolete("use <seealso cref=\"#submitTaskForm(String, java.Util.Map)\"/>")]
        void SubmitTaskFormData(string taskId, IDictionary<string, string> properties);

        /// <summary>
        ///     Completes a ITask with the user data that was entered as properties in a ITask form.
        /// </summary>
        /// <param name="taskId"> </param>
        /// <param name="properties">
        /// </param>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#UPDATE" /> permission on <seealso cref="Resources#ITask" />
        ///     or no <seealso cref="Permissions#UPDATE_TASK" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        void SubmitTaskForm(string taskId, IDictionary<string, ITypedValue> properties);

        /// <summary>
        ///     Retrieves a list of all variables for rendering a start from. The method takes into account
        ///     FormData specified for the start event. This allows defining default values for form fields.
        /// </summary>
        /// <param name="processDefinitionId"> the id of the process definition for which the start form should be retrieved. </param>
        /// <returns>
        ///     a map of VariableInstances.
        /// </returns>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        IVariableMap GetStartFormVariables(string processDefinitionId);

        /// <summary>
        ///     Retrieves a list of requested variables for rendering a start from. The method takes into account
        ///     FormData specified for the start event. This allows defining default values for form fields.
        /// </summary>
        /// <param name="processDefinitionId"> the id of the process definition for which the start form should be retrieved. </param>
        /// <param name="formVariables">
        ///     a Collection of the names of the variables to retrieve. Allows restricting the set of
        ///     retrieved variables.
        /// </param>
        /// <param name="deserializeObjectValues"> if false object values are not deserialized </param>
        /// <returns>
        ///     a map of VariableInstances.
        /// </returns>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        IVariableMap GetStartFormVariables(string processDefinitionId, ICollection<string> formVariables,
            bool deserializeObjectValues);

        /// <summary>
        ///     <para>
        ///         Retrieves a list of all variables for rendering a ITask form. In addition to the ITask variables and process
        ///         variables,
        ///         the method takes into account FormData specified for the ITask. This allows defining default values for form
        ///         fields.
        ///     </para>
        ///     <para>
        ///         A variable is resolved in the following order:
        ///         <ul>
        ///             <li>First, the method collects all form fields and creates variable instances for the form fields.</li>
        ///             <li>Next, the ITask variables are collected.</li>
        ///             <li>
        ///                 Next, process variables from the parent scopes of the ITask are collected, until the process instance
        ///                 scope is reached.
        ///             </li>
        ///         </ul>
        ///     </para>
        /// </summary>
        /// <param name="taskId"> the id of the ITask for which the variables should be retrieved. </param>
        /// <returns>
        ///     a map of VariableInstances.
        /// </returns>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on <seealso cref="Resources#ITask" />
        ///     or no <seealso cref="Permissions#READ_TASK" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        IVariableMap GetTaskFormVariables(string taskId);

        /// <summary>
        ///     <para>
        ///         Retrieves a list of requested variables for rendering a ITask form. In addition to the ITask variables and
        ///         process variables,
        ///         the method takes into account FormData specified for the ITask. This allows defining default values for form
        ///         fields.
        ///     </para>
        ///     <para>
        ///         A variable is resolved in the following order:
        ///         <ul>
        ///             <li>First, the method collects all form fields and creates variable instances for the form fields.</li>
        ///             <li>Next, the ITask variables are collected.</li>
        ///             <li>
        ///                 Next, process variables from the parent scopes of the ITask are collected, until the process instance
        ///                 scope is reached.
        ///             </li>
        ///         </ul>
        ///     </para>
        /// </summary>
        /// <param name="taskId"> the id of the ITask for which the variables should be retrieved. </param>
        /// <param name="formVariables">
        ///     a Collection of the names of the variables to retrieve. Allows restricting the set of
        ///     retrieved variables.
        /// </param>
        /// <param name="deserializeObjectValues"> if false object values are not deserialized </param>
        /// <returns>
        ///     a map of VariableInstances.
        /// </returns>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on <seealso cref="Resources#ITask" />
        ///     or no <seealso cref="Permissions#READ_TASK" /> permission on <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        IVariableMap GetTaskFormVariables(string taskId, ICollection<string> formVariables, bool deserializeObjectValues);

        /// <summary>
        ///     Retrieves a user defined reference to a start form.
        ///     In the Explorer app, it is assumed that the form key specifies a resource
        ///     in the deployment, which is the template for the form.  But users are free
        ///     to use this property differently.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        string GetStartFormKey(string processDefinitionId);

        /// <summary>
        ///     Retrieves a user defined reference to a ITask form.
        ///     In the Explorer app, it is assumed that the form key specifies a resource
        ///     in the deployment, which is the template for the form.  But users are free
        ///     to use this property differently.
        ///     Both arguments can be obtained from <seealso cref="ITask" /> instances returned by any
        ///     <seealso cref="TaskQuery" />.
        /// </summary>
        /// <exception cref="AuthorizationException">
        ///     If the user has no <seealso cref="Permissions#READ" /> permission on
        ///     <seealso cref="Resources#PROCESS_DEFINITION" />.
        /// </exception>
        string GetTaskFormKey(string processDefinitionId, string taskDefinitionKey);
    }
}