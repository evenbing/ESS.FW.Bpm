using System;
using System.Collections.Generic;
using System.Linq;
using ESS.FW.Bpm.Engine.Impl.Util;
using NUnit.Framework;

namespace Engine.Tests.Api.Task
{
    /// <summary>
    ///     Tests for cub-tasks querying
    /// </summary>
    [TestFixture]
    public class SubTaskQueryTest : PluggableProcessEngineTestCase
    {
        [SetUp]
        public virtual void setUp()
        {
            identityService.SaveUser(identityService.NewUser("kermit"));
            identityService.SaveUser(identityService.NewUser("gonzo"));

            identityService.SaveGroup(identityService.NewGroup("management"));
            identityService.SaveGroup(identityService.NewGroup("accountancy"));

            identityService.CreateMembership("kermit", "management");
            identityService.CreateMembership("kermit", "accountancy");

            taskIds = generateTestSubTasks();
        }
        
        [TearDown]
        public virtual void tearDown()
        {
            identityService.DeleteGroup("accountancy");
            identityService.DeleteGroup("management");
            identityService.DeleteUser("gonzo");
            identityService.DeleteUser("kermit");
            taskService.DeleteTasks(taskIds, true);
        }

        private IList<string> taskIds;

        /// <summary>
        ///     Generates some test sub-tasks to the tasks generated by <seealso cref="#generateTestTasks()" />.<br />
        ///     - 1 root task where kermit is a candidate with 2 subtasks (both with kermit as candidate) <br />
        ///     - 2 root task where gonzo is assignee with 3 + 2 subtasks assigned to gonzo
        /// </summary>
        private IList<string> generateTestSubTasks()
        {
            IList<string> ids = new List<string>();

            // 1 parent task for kermit
            ClockUtil.CurrentTime = DateTime.Parse("2008/01/01 01:01:01.000");
            var rootTask1 = taskService.NewTask();
            rootTask1.Name = "rootTestTask";
            rootTask1.Description = "rootTestTask description";
            taskService.SaveTask(rootTask1);
            ids.Add(rootTask1.Id);
            taskService.AddCandidateUser(rootTask1.Id, "kermit");
            // 2 sub-tasks for the task above
            ClockUtil.CurrentTime = DateTime.Parse("2009/01/01 01:01:01.000");
            for (var i = 1; i <= 2; i++)
            {
                var subtask = taskService.NewTask();
                subtask.Name = "kermitSubTask" + i;
                subtask.ParentTaskId = rootTask1.Id;
                subtask.Description = "description for kermit sub-task" + i;
                taskService.SaveTask(subtask);
                taskService.AddCandidateUser(subtask.Id, "kermit");
                ids.Add(subtask.Id);
            }

            // 2 parent tasks for gonzo
            // first parent task for gonzo
            ClockUtil.CurrentTime = DateTime.Parse("2008/02/01 02:02:02.000");
            var rootTask2 = taskService.NewTask();
            rootTask2.Name = "gonzoRootTask1";
            rootTask2.Description = "gonzo Root task1 description";
            taskService.SaveTask(rootTask2);
            taskService.SetAssignee(rootTask2.Id, "gonzo");
            ids.Add(rootTask2.Id);
            // second parent task for gonzo
            ClockUtil.CurrentTime = DateTime.Parse("2008/02/51 02:02:02.000");
            var rootTask3 = taskService.NewTask();
            rootTask3.Name = "gonzoRootTask2";
            rootTask3.Description = "gonzo Root task2 description";
            taskService.SaveTask(rootTask3);
            taskService.SetAssignee(rootTask3.Id, "gonzo");
            ids.Add(rootTask3.Id);
            // 3 sub-tasks for the first parent task
            ClockUtil.CurrentTime = DateTime.Parse("2009/01/01 01:01:01.000");
            for (var i = 1; i <= 3; i++)
            {
                var subtask = taskService.NewTask();
                subtask.Name = "gonzoSubTask1_" + i;
                subtask.ParentTaskId = rootTask2.Id;
                subtask.Description = "description for gonzo sub-task1_" + i;
                taskService.SaveTask(subtask);
                taskService.SetAssignee(subtask.Id, "gonzo");
                ids.Add(subtask.Id);
            }
            // 2 sub-tasks for the second parent task
            ClockUtil.CurrentTime = DateTime.Parse("2009/01/02 01:01:01.000");
            for (var i = 1; i <= 2; i++)
            {
                var subtask = taskService.NewTask();
                subtask.Name = "gonzoSubTask2_" + i;
                subtask.ParentTaskId = rootTask3.Id;
                subtask.Description = "description for gonzo sub-task2_" + i;
                taskService.SaveTask(subtask);
                taskService.SetAssignee(subtask.Id, "gonzo");
                ids.Add(subtask.Id);
            }
            return ids;
        }

        /// <summary>
        ///     test for task inclusion/exclusion when additional filter is specified (like assignee), no order.
        /// </summary>
        [Test]
        public virtual void testQueryByAssigneeExcludeSubtasks()
        {
            // gonzo has 2 root tasks and 3+2 subtasks assigned
            // include subtasks
            var query = taskService.CreateTaskQuery(c => c.Assignee == "gonzo");
            Assert.AreEqual(7, query.Count());
            Assert.AreEqual(7, query.Count());
            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "gonzo") /*.ExcludeSubtasks()*/;
            Assert.AreEqual(2, query.Count());
            Assert.AreEqual(2, query.Count());

            // kermit has no root tasks and no subtasks assigned
            // include subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "kermit");
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query.Count());
            Assert.IsNull(query.First());
            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "kermit") /*.ExcludeSubtasks()*/;
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query.Count());
            Assert.IsNull(query.First());
        }

        /// <summary>
        ///     test for task inclusion/exclusion when additional filter is specified (like assignee), ordered.
        /// </summary>
        [Test]
        public virtual void testQueryByAssigneeExcludeSubtasksOrdered()
        {
            // gonzo has 2 root tasks and 3+2 subtasks assigned
            // include subtasks
            var query = taskService.CreateTaskQuery(c => c.Assignee == "gonzo") /*.OrderByTaskCreateTime()*/ /*.Desc()*/
                ;
            Assert.AreEqual(7, query.Count());
            Assert.AreEqual(7, query.Count());
            Assert.AreEqual(DateTime.Parse("2009/01/02 01:01:01.000"), query.ToList()
                .First()
                .CreateTime);

            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee ==
                                                     "gonzo") /*.ExcludeSubtasks()*/ /*.OrderByTaskCreateTime()*/ /*.Asc()*/
                ;
            Assert.AreEqual(2, query.Count());
            Assert.AreEqual(2, query.Count());
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()
                .First()
                .CreateTime);
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()
                .First()
                .CreateTime);

            // kermit has no root tasks and no subtasks assigned
            // include subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "kermit") /*.OrderByTaskCreateTime()*/ /*.Asc()*/;
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query.Count());
            Assert.IsNull(query.First());
            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee ==
                                                     "kermit") /*.ExcludeSubtasks()*/ /*.OrderByTaskCreateTime()*/ /*.Desc()*/
                ;
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query.Count());
            Assert.IsNull(query.First());
        }

        /// <summary>
        ///     test for task inclusion/exclusion when additional filter is specified (like assignee), ordered.
        /// </summary>
        [Test]
        public virtual void testQueryByAssigneeExcludeSubtasksOrderedAndPaginated()
        {
            //SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");

            // gonzo has 2 root tasks and 3+2 subtasks assigned
            // include subtasks
            var query = taskService.CreateTaskQuery(c => c.Assignee == "gonzo") /*.OrderByTaskCreateTime()*/ /*.Asc()*/;
            Assert.AreEqual(7, query.Count());
            Assert.AreEqual(1, query /*.ListPage(0, 1)*/.Count());
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()
                .First()
                .CreateTime);
            Assert.AreEqual(1, query /*.ListPage(1, 1)*/.Count());
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()[1]
                .CreateTime);
            Assert.AreEqual(2, query /*.ListPage(0, 2)*/.Count());
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()
                .First()
                .CreateTime);
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()[1]
                .CreateTime);

            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee ==
                                                     "gonzo") /*.ExcludeSubtasks()*/ /*.OrderByTaskCreateTime()*/ /*.Desc()*/
                ;
            Assert.AreEqual(2, query.Count());
            Assert.AreEqual(1, query /*.ListPage(1, 1)*/.Count());
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()
                .First()
                .CreateTime);
            Assert.AreEqual(1, query /*.ListPage(0, 1)*/.Count());
            Assert.AreEqual(DateTime.Parse("2008/02/01 02:02:02.000"), query.ToList()[1]
                .CreateTime);

            // kermit has no root tasks and no subtasks assigned
            // include subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "kermit") /*.OrderByTaskCreateTime()*/ /*.Asc()*/;
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query /*.ListPage(0, 2)*/.Count());
            Assert.IsNull(query.First());
            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee ==
                                                     "kermit") /*.ExcludeSubtasks()*/ /*.OrderByTaskCreateTime()*/ /*.Desc()*/
                ;
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query /*.ListPage(0, 2)*/.Count());
            Assert.IsNull(query.First());
        }

        /// <summary>
        ///     test for task inclusion/exclusion when additional filter is specified (like assignee), no order.
        /// </summary>
        [Test]
        public virtual void testQueryByAssigneeExcludeSubtasksPaginated()
        {
            // gonzo has 2 root tasks and 3+2 subtasks assigned
            // include subtasks
            var query = taskService.CreateTaskQuery(c => c.Assignee == "gonzo");
            Assert.AreEqual(7, query.Count());
            Assert.AreEqual(2, query /*.ListPage(0, 2)*/.Count());
            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "gonzo") /*.ExcludeSubtasks()*/;
            Assert.AreEqual(2, query.Count());
            Assert.AreEqual(1, query.Count());

            // kermit has no root tasks and no subtasks assigned
            // include subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "kermit");
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query.Count());
            Assert.IsNull(query.First());
            // exclude subtasks
            query = taskService.CreateTaskQuery(c => c.Assignee == "kermit") /*.ExcludeSubtasks()*/;
            Assert.AreEqual(0, query.Count());
            Assert.AreEqual(0, query.Count());
            Assert.IsNull(query.First());
        }

        /// <summary>
        ///     test for task inclusion/exclusion (no other filters, no sort)
        /// </summary>
        [Test]
        public virtual void testQueryExcludeSubtasks()
        {
            // query all tasks, including subtasks
            var query = taskService.CreateTaskQuery();
            Assert.AreEqual(10, query.Count());
            Assert.AreEqual(10, query.Count());
            // query only parent tasks (exclude subtasks)
            query = taskService.CreateTaskQuery() /*.ExcludeSubtasks()*/;
            Assert.AreEqual(3, query.Count());
            Assert.AreEqual(3, query.Count());
        }

        /// <summary>
        ///     test for task inclusion/exclusion (no other filters, order by task assignee )
        /// </summary>
        [Test]
        public virtual void testQueryExcludeSubtasksSorted()
        {
            // query all tasks, including subtasks
            var query = taskService.CreateTaskQuery() /*.OrderByTaskAssignee()*/ /*.Asc()*/;
            Assert.AreEqual(10, query.Count());
            Assert.AreEqual(10, query.Count());
            // query only parent tasks (exclude subtasks)
            query = taskService.CreateTaskQuery() /*.ExcludeSubtasks()*/ /*.OrderByTaskAssignee()*/ /*.Desc()*/;
            Assert.AreEqual(3, query.Count());
            Assert.AreEqual(3, query.Count());
        }

        /// <summary>
        ///     test for task inclusion/exclusion (no other filters, no sort)
        /// </summary>
        [Test]
        public virtual void testQueryWithPagination()
        {
            // query all tasks, including subtasks
            var query = taskService.CreateTaskQuery();
            Assert.AreEqual(10, query.Count());
            Assert.AreEqual(2, query /*.ListPage(0, 2)*/.Count());
            // query only parent tasks (exclude subtasks)
            query = taskService.CreateTaskQuery() /*.ExcludeSubtasks()*/;
            Assert.AreEqual(3, query.Count());
            Assert.AreEqual(1, query /*.ListPage(0, 1)*/.Count());
        }
    }
}